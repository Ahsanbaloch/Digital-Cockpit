/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.14.v202310241606.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#ifndef V1_ORG_EXAMPLE_CANSERVICE_CAN_SERVICE_SOMEIP_STUB_ADAPTER_HPP_
#define V1_ORG_EXAMPLE_CANSERVICE_CAN_SERVICE_SOMEIP_STUB_ADAPTER_HPP_

#include "EventGroupIDs.h"
#include <v1/org/example/canservice/CANServiceStub.hpp>
#include <v1/org/example/canservice/CANServiceSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace org {
namespace example {
namespace canservice {

template <typename _Stub = ::v1::org::example::canservice::CANServiceStub, typename... _Stubs>
class CANServiceSomeIPStubAdapterInternal
    : public virtual CANServiceStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>,
      public std::enable_shared_from_this< CANServiceSomeIPStubAdapterInternal<_Stub, _Stubs...>>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> CANServiceSomeIPStubAdapterHelper;

    ~CANServiceSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        CANServiceSomeIPStubAdapterHelper::deinit();
    }

    void fireOnCANDataReceivedEvent(const uint32_t &_id, const CommonAPI::ByteBuffer &_data);

    void deactivateManagedInstances() {}
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::org::example::canservice::CANServiceStub,
        CommonAPI::Version
    > getCANServiceInterfaceVersionStubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::org::example::canservice::CANServiceStub,
        std::tuple< >,
        std::tuple< uint32_t, CommonAPI::ByteBuffer>,
        std::tuple< >,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint32_t>, CommonAPI::SomeIP::ByteBufferDeployment>
    > getCANDataStubDispatcher;
    
    CANServiceSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        CANServiceSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< CANServiceStub>(_stub)),
        getCANServiceInterfaceVersionStubDispatcher(&CANServiceStub::lockInterfaceVersionAttribute, &CANServiceStub::getInterfaceVersion, false, true),
        getCANDataStubDispatcher(
            &CANServiceStub::getCANData,
            false,
            _stub->hasElement(0),
            std::make_tuple(),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr), static_cast< CommonAPI::SomeIP::ByteBufferDeployment* >(nullptr)))
        
    {
        CANServiceSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xbb8) }, &getCANDataStubDispatcher );
        // Provided events/fields
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(UNDEFINED_EVENTGROUP_ID));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x80e8), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
    }

    // Register/Unregister event handlers for selective broadcasts
    void registerSelectiveEventHandlers();
    void unregisterSelectiveEventHandlers();

};

template <typename _Stub, typename... _Stubs>
void CANServiceSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireOnCANDataReceivedEvent(const uint32_t &_id, const CommonAPI::ByteBuffer &_data) {
    CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deployed_id(_id, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::Deployable< CommonAPI::ByteBuffer, CommonAPI::SomeIP::ByteBufferDeployment> deployed_data(_data, static_cast< CommonAPI::SomeIP::ByteBufferDeployment* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t> > 
    ,  CommonAPI::Deployable< CommonAPI::ByteBuffer, CommonAPI::SomeIP::ByteBufferDeployment > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x80e8),
            false,
             deployed_id 
            ,  deployed_data 
    );
}


template <typename _Stub, typename... _Stubs>
void CANServiceSomeIPStubAdapterInternal<_Stub, _Stubs...>::registerSelectiveEventHandlers() {

}

template <typename _Stub, typename... _Stubs>
void CANServiceSomeIPStubAdapterInternal<_Stub, _Stubs...>::unregisterSelectiveEventHandlers() {

}

template <typename _Stub = ::v1::org::example::canservice::CANServiceStub, typename... _Stubs>
class CANServiceSomeIPStubAdapter
    : public CANServiceSomeIPStubAdapterInternal<_Stub, _Stubs...> {
public:
    CANServiceSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          CANServiceSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace canservice
} // namespace example
} // namespace org
} // namespace v1

#endif // V1_ORG_EXAMPLE_CANSERVICE_CAN_Service_SOMEIP_STUB_ADAPTER_HPP_
