/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.14.v202310241605.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_ORG_EXAMPLE_CANSERVICE_CAN_Service_PROXY_HPP_
#define V1_ORG_EXAMPLE_CANSERVICE_CAN_Service_PROXY_HPP_

#include <v1/org/example/canservice/CANServiceProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif


#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace org {
namespace example {
namespace canservice {

template <typename ... _AttributeExtensions>
class CANServiceProxy
    : virtual public CANService,
      virtual public CANServiceProxyBase,
      virtual public _AttributeExtensions... {
public:
    CANServiceProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~CANServiceProxy();

    typedef ::v1::org::example::canservice::CANService InterfaceType;


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

    virtual std::future<void> getCompletionFuture();

    /**
     * Calls getCANData with synchronous semantics.
     *
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getCANData(CommonAPI::CallStatus &_internalCallStatus, uint32_t &_id, CommonAPI::ByteBuffer &_data, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getCANData with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getCANDataAsync(GetCANDataAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Returns the wrapper class that provides access to the broadcast onCANDataReceived.
     */
    virtual OnCANDataReceivedEvent& getOnCANDataReceivedEvent() {
        return delegate_->getOnCANDataReceivedEvent();
    }



 private:
    std::shared_ptr< CANServiceProxyBase> delegate_;
};

typedef CANServiceProxy<> CANServiceProxyDefault;


//
// CANServiceProxy Implementation
//
template <typename ... _AttributeExtensions>
CANServiceProxy<_AttributeExtensions...>::CANServiceProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< CANServiceProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< CANServiceProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
CANServiceProxy<_AttributeExtensions...>::~CANServiceProxy() {
}

template <typename ... _AttributeExtensions>
void CANServiceProxy<_AttributeExtensions...>::getCANData(CommonAPI::CallStatus &_internalCallStatus, uint32_t &_id, CommonAPI::ByteBuffer &_data, const CommonAPI::CallInfo *_info) {
    delegate_->getCANData(_internalCallStatus, _id, _data, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CANServiceProxy<_AttributeExtensions...>::getCANDataAsync(GetCANDataAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getCANDataAsync(_callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &CANServiceProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool CANServiceProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool CANServiceProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& CANServiceProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& CANServiceProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


template <typename ... _AttributeExtensions>
std::future<void> CANServiceProxy<_AttributeExtensions...>::getCompletionFuture() {
    return delegate_->getCompletionFuture();
}

} // namespace canservice
} // namespace example
} // namespace org
} // namespace v1



// Compatibility
namespace v1_0 = v1;

#endif // V1_ORG_EXAMPLE_CANSERVICE_CAN_Service_PROXY_HPP_
