/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.14.v202310241605.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_ORG_EXAMPLE_CANSERVICE_CAN_Service_PROXY_BASE_HPP_
#define V1_ORG_EXAMPLE_CANSERVICE_CAN_Service_PROXY_BASE_HPP_

#include <v1/org/example/canservice/CANService.hpp>



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace org {
namespace example {
namespace canservice {

class CANServiceProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        uint32_t, CommonAPI::ByteBuffer
    > OnCANDataReceivedEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const uint32_t&, const CommonAPI::ByteBuffer&)> GetCANDataAsyncCallback;

    virtual void getCANData(CommonAPI::CallStatus &_internalCallStatus, uint32_t &_id, CommonAPI::ByteBuffer &_data, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getCANDataAsync(GetCANDataAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual OnCANDataReceivedEvent& getOnCANDataReceivedEvent() = 0;

    virtual std::future<void> getCompletionFuture() = 0;
};

} // namespace canservice
} // namespace example
} // namespace org
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_ORG_EXAMPLE_CANSERVICE_CAN_Service_PROXY_BASE_HPP_
